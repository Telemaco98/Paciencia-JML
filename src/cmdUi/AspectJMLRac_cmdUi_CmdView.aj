import cmdUi.*;
import org.jmlspecs.ajmlrac.runtime.*;
import org.jmlspecs.lang.annotation.*;
import cmdUi.menu.AbstractMenu;
import cmdUi.menu.MainMenu;
import controller.Controller;
import util.View;
import java.util.Map;


privileged aspect AspectJMLRac_cmdUi_CmdViewa95735db_9c9d_4b44_972b_9b1e53bd28c2 {

 declare precedence: AspectJMLRac_*, *;


  /** Generated by AspectJML to check the normal postcondition of
   * method CmdView. */
  after (final cmdUi.CmdView object$rac) returning () :
     execution(cmdUi.CmdView.new(  )) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method cmdUi.CmdView.<init> regarding specifications at \nFile \"cmdUi.CmdView.java\", line 18, character 27 (cmdUi.CmdView.java:18), and \nby method cmdUi.CmdView.<init> regarding code at \nFile \"cmdUi.CmdView.java\""+", when \n"+"\t\'this.con\' is "+object$rac.con;
         evalErrorMsg = "Invalid expression in \"cmdUi.CmdView.java\" by method cmdUi.CmdView.<init> regarding specifications at \nline 18, character 27 (cmdUi.CmdView.java:18)"+", when \n"+"\t\'this.con\' is "+object$rac.con+"\nCaused by: ";
       if (true){
         try {
           rac$b = (object$rac.con != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, "cmdUi.CmdView.<init>()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method CmdView. */
  after (final cmdUi.CmdView object$rac) throwing (Throwable rac$e) :
     execution(cmdUi.CmdView.new(  )) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "cmdUi.CmdView.<init>()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"cmdUi.CmdView.java\" by method cmdUi.CmdView.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method cmdUi.CmdView.<init> regarding code at \nFile \"cmdUi.CmdView.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "cmdUi.CmdView.<init>()", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method start. */
  after (final cmdUi.CmdView object$rac) throwing (Throwable rac$e) :
     (execution(void cmdUi.CmdView.start())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".start()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"cmdUi.CmdView.java\" by method cmdUi.CmdView.start\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method cmdUi.CmdView.start regarding code at \nFile \"cmdUi.CmdView.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".start()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method drawOnScreen. */
  after (final cmdUi.CmdView object$rac) throwing (Throwable rac$e) :
     (execution(void cmdUi.CmdView.drawOnScreen())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".drawOnScreen()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"cmdUi.CmdView.java\" by method cmdUi.CmdView.drawOnScreen\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method cmdUi.CmdView.drawOnScreen regarding code at \nFile \"cmdUi.CmdView.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".drawOnScreen()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check non-static invariants of 
   * class CmdView. */
  before (final cmdUi.CmdView object$rac) :
     (execution(!static * cmdUi.CmdView+.*(..))) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
         String invErrorMsg = "@pre <File \"CmdView.java\"> regarding code at \nFile \"CmdView.java\"\nnon_null for field 'currentMenu' <File \"cmdUi.CmdView.java\", line 15, character 42 (cmdUi.CmdView.java:15)>";
         String evalErrorMsg = "Invalid expression in \"@pre <File \"CmdView.java\"> regarding code at \nFile \"CmdView.java\"\nnon_null for field 'currentMenu' <File \"cmdUi.CmdView.java\", line 15, character 42 (cmdUi.CmdView.java:15)>\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = (object$rac.currentMenu != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
             throw (JMLAssertionError) rac$cause;
            }
            else {
             throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
       JMLChecker.checkInvariant(rac$b, invErrorMsg, -1);

     }

  /** Generated by AspectJML to check the precondition of
   * method CmdView. */
  before (final cmdUi.CmdView object$rac) :
     execution(cmdUi.CmdView.new(  )) && 
     this(object$rac) {
       String preErrorMsg = "by method cmdUi.CmdView.<init> regarding specifications at \nFile \"cmdUi.CmdView.java\", [spec-case]: line 18, character 20 (cmdUi.CmdView.java:18), and \nby method cmdUi.CmdView.<init> regarding code at \nFile \"cmdUi.CmdView.java\"";
       String evalErrorMsg = "Invalid expression in \"cmdUi.CmdView.java\" by method cmdUi.CmdView.<init> regarding specifications at \n[spec-case]: line 18, character 20 (cmdUi.CmdView.java:18)\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (true);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "cmdUi.CmdView.<init>()");

     }


  /** Generated by AspectJML to check non-static invariants of 
   * class CmdView. */
  after (final cmdUi.CmdView object$rac) :
     (execution(!static * cmdUi.CmdView+.*(..)) || 
       execution(cmdUi.CmdView+.new(..))) && 
     !execution(void cmdUi.CmdView.finalize() throws Throwable) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
       if (!(JMLChecker.hasAnyJMLError)) {
         String invErrorMsg = "@post <File \"CmdView.java\"> regarding code at \nFile \"CmdView.java\"\nnon_null for field 'currentMenu' <File \"cmdUi.CmdView.java\", line 15, character 42 (cmdUi.CmdView.java:15)>";
         String evalErrorMsg = "Invalid expression in \"@post <File \"CmdView.java\"> regarding code at \nFile \"CmdView.java\"\nnon_null for field 'currentMenu' <File \"cmdUi.CmdView.java\", line 15, character 42 (cmdUi.CmdView.java:15)>\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = (object$rac.currentMenu != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
         }
         JMLChecker.checkInvariant(rac$b, invErrorMsg, -1);

       }
     }

  /** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
    after(final cmdUi.CmdView object$rac): (execution( * cmdUi.CmdView..*+.*(..))
            || execution(cmdUi.CmdView..*+.new(..))
            || execution( * cmdUi.CmdView+.*(..))
            || execution(cmdUi.CmdView+.new(..))) && 
     this(object$rac) {
     JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
    }

  /** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
    after() throwing (Throwable rac$e): (execution( * cmdUi.CmdView..*+.*(..))
            || execution(cmdUi.CmdView..*+.new(..))
            || execution( * cmdUi.CmdView+.*(..))
            || execution(cmdUi.CmdView+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
}
