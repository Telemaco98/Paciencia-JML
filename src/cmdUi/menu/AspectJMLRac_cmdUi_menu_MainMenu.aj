import cmdUi.menu.*;
import org.jmlspecs.ajmlrac.runtime.*;
import org.jmlspecs.lang.annotation.*;
import java.time.Duration;
import cmdUi.Main;
import cmdUi.PilhaListView;
import controller.Controller;
import java.util.Map;


privileged aspect AspectJMLRac_cmdUi_menu_MainMenu5a4d738b_17db_4e5c_9751_d06b6b06c049 {

 declare precedence: AspectJMLRac_*, *;







  /** Generated by AspectJML to check the exceptional postcondition of
   * method MainMenu. */
  after (final cmdUi.menu.MainMenu object$rac, final controller.Controller con, final int options, final cmdUi.menu.AbstractMenu parent) throwing (Throwable rac$e) :
     execution(cmdUi.menu.MainMenu.new( controller.Controller, int, cmdUi.menu.AbstractMenu )) && this(object$rac) && args(con, options, parent) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "cmdUi.menu.MainMenu.<init>(controller.Controller, int, cmdUi.menu.AbstractMenu)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"cmdUi.menu.MainMenu.java\" by method cmdUi.menu.MainMenu.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method cmdUi.menu.MainMenu.<init> regarding code at \nFile \"cmdUi.menu.MainMenu.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "cmdUi.menu.MainMenu.<init>(controller.Controller, int, cmdUi.menu.AbstractMenu)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method draw. */
  after (final cmdUi.menu.MainMenu object$rac) throwing (Throwable rac$e) :
     (execution(void cmdUi.menu.MainMenu.draw())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".draw()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"cmdUi.menu.MainMenu.java\" by method cmdUi.menu.MainMenu.draw\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method cmdUi.menu.MainMenu.draw regarding code at \nFile \"cmdUi.menu.MainMenu.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".draw()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method processInput. */
  after (final cmdUi.menu.MainMenu object$rac, final int op) returning (final cmdUi.menu.AbstractMenu rac$result) :
     (execution(cmdUi.menu.AbstractMenu cmdUi.menu.MainMenu.processInput(int))) && this(object$rac) && args(op) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method cmdUi.menu.MainMenu.processInput regarding code at \nFile \"cmdUi.menu.MainMenu.java\", line 49 (cmdUi.menu.MainMenu.java:49)";
         evalErrorMsg = "Invalid expression in \"cmdUi.menu.MainMenu.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".processInput(int)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method processInput. */
  after (final cmdUi.menu.MainMenu object$rac, final int op) throwing (Throwable rac$e) :
     (execution(cmdUi.menu.AbstractMenu cmdUi.menu.MainMenu.processInput(int))) && this(object$rac) && args(op) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".processInput(int)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"cmdUi.menu.MainMenu.java\" by method cmdUi.menu.MainMenu.processInput\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method cmdUi.menu.MainMenu.processInput regarding code at \nFile \"cmdUi.menu.MainMenu.java\", line 49 (cmdUi.menu.MainMenu.java:49)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".processInput(int)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method opFinalizar. */
  after (final cmdUi.menu.MainMenu object$rac) throwing (Throwable rac$e) :
     (execution(void cmdUi.menu.MainMenu.opFinalizar())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".opFinalizar()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"cmdUi.menu.MainMenu.java\" by method cmdUi.menu.MainMenu.opFinalizar\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method cmdUi.menu.MainMenu.opFinalizar regarding code at \nFile \"cmdUi.menu.MainMenu.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".opFinalizar()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method opReiniciar. */
  after (final cmdUi.menu.MainMenu object$rac) throwing (Throwable rac$e) :
     (execution(void cmdUi.menu.MainMenu.opReiniciar())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".opReiniciar()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"cmdUi.menu.MainMenu.java\" by method cmdUi.menu.MainMenu.opReiniciar\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method cmdUi.menu.MainMenu.opReiniciar regarding code at \nFile \"cmdUi.menu.MainMenu.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".opReiniciar()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method opVirarCartaEstoque. */
  after (final cmdUi.menu.MainMenu object$rac) throwing (Throwable rac$e) :
     (execution(void cmdUi.menu.MainMenu.opVirarCartaEstoque())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".opVirarCartaEstoque()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"cmdUi.menu.MainMenu.java\" by method cmdUi.menu.MainMenu.opVirarCartaEstoque\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method cmdUi.menu.MainMenu.opVirarCartaEstoque regarding code at \nFile \"cmdUi.menu.MainMenu.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".opVirarCartaEstoque()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method opMoverCartas. */
  after (final cmdUi.menu.MainMenu object$rac) throwing (Throwable rac$e) :
     (execution(void cmdUi.menu.MainMenu.opMoverCartas())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".opMoverCartas()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"cmdUi.menu.MainMenu.java\" by method cmdUi.menu.MainMenu.opMoverCartas\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method cmdUi.menu.MainMenu.opMoverCartas regarding code at \nFile \"cmdUi.menu.MainMenu.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".opMoverCartas()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method setPilhaListView. */
  after (final cmdUi.menu.MainMenu object$rac, final cmdUi.PilhaListView plv) throwing (Throwable rac$e) :
     (execution(void cmdUi.menu.MainMenu.setPilhaListView(cmdUi.PilhaListView))) && this(object$rac) && args(plv) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setPilhaListView(cmdUi.PilhaListView)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"cmdUi.menu.MainMenu.java\" by method cmdUi.menu.MainMenu.setPilhaListView\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method cmdUi.menu.MainMenu.setPilhaListView regarding code at \nFile \"cmdUi.menu.MainMenu.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setPilhaListView(cmdUi.PilhaListView)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check non-static invariants of 
   * class MainMenu. */
  before (final cmdUi.menu.MainMenu object$rac) :
     (execution(!static * cmdUi.menu.MainMenu+.*(..))) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
         String invErrorMsg = "@pre <File \"MainMenu.java\"> regarding code at \nFile \"MainMenu.java\"\nnon_null for field 'plv' <File \"cmdUi.menu.MainMenu.java\", line 11, character 35 (cmdUi.menu.MainMenu.java:11)>";
         String evalErrorMsg = "Invalid expression in \"@pre <File \"MainMenu.java\"> regarding code at \nFile \"MainMenu.java\"\nnon_null for field 'plv' <File \"cmdUi.menu.MainMenu.java\", line 11, character 35 (cmdUi.menu.MainMenu.java:11)>\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = (object$rac.plv != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
             throw (JMLAssertionError) rac$cause;
            }
            else {
             throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
       JMLChecker.checkInvariant(rac$b, invErrorMsg, -1);

     }

  /** Generated by AspectJML to check the precondition of
   * method MainMenu. */
  before (final cmdUi.menu.MainMenu object$rac, final controller.Controller con, final int options, final cmdUi.menu.AbstractMenu parent) :
     execution(cmdUi.menu.MainMenu.new( controller.Controller, int, cmdUi.menu.AbstractMenu )) && 
     this(object$rac) && args(con, options, parent) {
       String preErrorMsg = "by method cmdUi.menu.MainMenu.<init> regarding code at \nFile \"cmdUi.menu.MainMenu.java\""+", when \n"+"\t\'con\' is "+con+"\n\t\'parent\' is "+parent+ ", when \n"+"\t\'con\' is "+con+"\n\t\'parent\' is "+parent;
       String evalErrorMsg = "Invalid expression in \"cmdUi.menu.MainMenu.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = ((con != null) && (parent != null));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "cmdUi.menu.MainMenu.<init>(controller.Controller, int, cmdUi.menu.AbstractMenu)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setPilhaListView. */
  before (final cmdUi.menu.MainMenu object$rac, final cmdUi.PilhaListView plv) :
     (execution(void cmdUi.menu.MainMenu.setPilhaListView(cmdUi.PilhaListView))) && 
     this(object$rac) && args(plv) {
       String preErrorMsg = "by method cmdUi.menu.MainMenu.setPilhaListView regarding code at \nFile \"cmdUi.menu.MainMenu.java\""+", when \n"+"\t\'plv\' is "+plv+ ", when \n"+"\t\'plv\' is "+plv;
       String evalErrorMsg = "Invalid expression in \"cmdUi.menu.MainMenu.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (plv != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setPilhaListView(cmdUi.PilhaListView)");

     }


  /** Generated by AspectJML to check non-static invariants of 
   * class MainMenu. */
  after (final cmdUi.menu.MainMenu object$rac) :
     (execution(!static * cmdUi.menu.MainMenu+.*(..)) || 
       execution(cmdUi.menu.MainMenu+.new(..))) && 
     !execution(void cmdUi.menu.MainMenu.finalize() throws Throwable) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
       if (!(JMLChecker.hasAnyJMLError)) {
         String invErrorMsg = "@post <File \"MainMenu.java\"> regarding code at \nFile \"MainMenu.java\"\nnon_null for field 'plv' <File \"cmdUi.menu.MainMenu.java\", line 11, character 35 (cmdUi.menu.MainMenu.java:11)>";
         String evalErrorMsg = "Invalid expression in \"@post <File \"MainMenu.java\"> regarding code at \nFile \"MainMenu.java\"\nnon_null for field 'plv' <File \"cmdUi.menu.MainMenu.java\", line 11, character 35 (cmdUi.menu.MainMenu.java:11)>\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = (object$rac.plv != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
         }
         JMLChecker.checkInvariant(rac$b, invErrorMsg, -1);

       }
     }

  /** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
    after(final cmdUi.menu.MainMenu object$rac): (execution( * cmdUi.menu.MainMenu..*+.*(..))
            || execution(cmdUi.menu.MainMenu..*+.new(..))
            || execution( * cmdUi.menu.MainMenu+.*(..))
            || execution(cmdUi.menu.MainMenu+.new(..))) && 
     this(object$rac) {
     JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
    }

  /** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
    after() throwing (Throwable rac$e): (execution( * cmdUi.menu.MainMenu..*+.*(..))
            || execution(cmdUi.menu.MainMenu..*+.new(..))
            || execution( * cmdUi.menu.MainMenu+.*(..))
            || execution(cmdUi.menu.MainMenu+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }

  /** Generated by AspectJML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_MainMenu{
    before(): (execution( * cmdUi.menu.MainMenu..*+.*(..))
            || execution(cmdUi.menu.MainMenu..*+.new(..))
            || execution( * cmdUi.menu.MainMenu+.*(..))
            || execution(cmdUi.menu.MainMenu+.new(..))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }
}
