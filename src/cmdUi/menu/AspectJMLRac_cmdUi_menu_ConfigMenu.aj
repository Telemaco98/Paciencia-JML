import cmdUi.menu.*;
import org.jmlspecs.ajmlrac.runtime.*;
import org.jmlspecs.lang.annotation.*;
import cmdUi.Main;
import controller.Controller;
import java.util.Map;


privileged aspect AspectJMLRac_cmdUi_menu_ConfigMenu520d9330_0eeb_4574_9b77_a4aabb302e64 {

 declare precedence: AspectJMLRac_*, *;


  /** Generated by AspectJML to check the exceptional postcondition of
   * method ConfigMenu. */
  after (final cmdUi.menu.ConfigMenu object$rac, final controller.Controller con, final int options, final cmdUi.menu.AbstractMenu parent) throwing (Throwable rac$e) :
     execution(cmdUi.menu.ConfigMenu.new( controller.Controller, int, cmdUi.menu.AbstractMenu )) && this(object$rac) && args(con, options, parent) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "cmdUi.menu.ConfigMenu.<init>(controller.Controller, int, cmdUi.menu.AbstractMenu)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"cmdUi.menu.ConfigMenu.java\" by method cmdUi.menu.ConfigMenu.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method cmdUi.menu.ConfigMenu.<init> regarding code at \nFile \"cmdUi.menu.ConfigMenu.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "cmdUi.menu.ConfigMenu.<init>(controller.Controller, int, cmdUi.menu.AbstractMenu)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method draw. */
  after (final cmdUi.menu.ConfigMenu object$rac) throwing (Throwable rac$e) :
     (execution(void cmdUi.menu.ConfigMenu.draw())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".draw()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"cmdUi.menu.ConfigMenu.java\" by method cmdUi.menu.ConfigMenu.draw\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method cmdUi.menu.ConfigMenu.draw regarding code at \nFile \"cmdUi.menu.ConfigMenu.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".draw()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method processInput. */
  after (final cmdUi.menu.ConfigMenu object$rac, final int op) returning (final cmdUi.menu.AbstractMenu rac$result) :
     (execution(cmdUi.menu.AbstractMenu cmdUi.menu.ConfigMenu.processInput(int))) && this(object$rac) && args(op) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method cmdUi.menu.ConfigMenu.processInput regarding code at \nFile \"cmdUi.menu.ConfigMenu.java\", line 26 (cmdUi.menu.ConfigMenu.java:26)";
         evalErrorMsg = "Invalid expression in \"cmdUi.menu.ConfigMenu.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".processInput(int)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method processInput. */
  after (final cmdUi.menu.ConfigMenu object$rac, final int op) throwing (Throwable rac$e) :
     (execution(cmdUi.menu.AbstractMenu cmdUi.menu.ConfigMenu.processInput(int))) && this(object$rac) && args(op) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".processInput(int)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"cmdUi.menu.ConfigMenu.java\" by method cmdUi.menu.ConfigMenu.processInput\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method cmdUi.menu.ConfigMenu.processInput regarding code at \nFile \"cmdUi.menu.ConfigMenu.java\", line 26 (cmdUi.menu.ConfigMenu.java:26)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".processInput(int)", rac$e);
  		 }
  		   }
  	 }



  /** Generated by AspectJML to check the precondition of
   * method ConfigMenu. */
  before (final cmdUi.menu.ConfigMenu object$rac, final controller.Controller con, final int options, final cmdUi.menu.AbstractMenu parent) :
     execution(cmdUi.menu.ConfigMenu.new( controller.Controller, int, cmdUi.menu.AbstractMenu )) && 
     this(object$rac) && args(con, options, parent) {
       String preErrorMsg = "by method cmdUi.menu.ConfigMenu.<init> regarding code at \nFile \"cmdUi.menu.ConfigMenu.java\""+", when \n"+"\t\'con\' is "+con+"\n\t\'parent\' is "+parent+ ", when \n"+"\t\'con\' is "+con+"\n\t\'parent\' is "+parent;
       String evalErrorMsg = "Invalid expression in \"cmdUi.menu.ConfigMenu.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = ((con != null) && (parent != null));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "cmdUi.menu.ConfigMenu.<init>(controller.Controller, int, cmdUi.menu.AbstractMenu)");

     }



  /** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
    after(final cmdUi.menu.ConfigMenu object$rac): (execution( * cmdUi.menu.ConfigMenu..*+.*(..))
            || execution(cmdUi.menu.ConfigMenu..*+.new(..))
            || execution( * cmdUi.menu.ConfigMenu+.*(..))
            || execution(cmdUi.menu.ConfigMenu+.new(..))) && 
     this(object$rac) {
     JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
    }

  /** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
    after() throwing (Throwable rac$e): (execution( * cmdUi.menu.ConfigMenu..*+.*(..))
            || execution(cmdUi.menu.ConfigMenu..*+.new(..))
            || execution( * cmdUi.menu.ConfigMenu+.*(..))
            || execution(cmdUi.menu.ConfigMenu+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
}
