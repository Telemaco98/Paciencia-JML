import cmdUi.*;
import org.jmlspecs.ajmlrac.runtime.*;
import org.jmlspecs.lang.annotation.*;
import java.util.ArrayList;
import model.Pilha;
import util.Carta;
import java.util.Map;


privileged aspect AspectJMLRac_cmdUi_PilhaListView277f9162_cd98_4b68_9526_a3bb7cbec4b6 {

 declare precedence: AspectJMLRac_*, *;



  /** Generated by AspectJML to check the exceptional postcondition of
   * method PilhaListView. */
  after (final cmdUi.PilhaListView object$rac, final java.util.ArrayList pilhas) throwing (Throwable rac$e) :
     execution(cmdUi.PilhaListView.new( java.util.ArrayList )) && this(object$rac) && args(pilhas) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "cmdUi.PilhaListView.<init>(java.util.ArrayList)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"cmdUi.PilhaListView.java\" by method cmdUi.PilhaListView.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method cmdUi.PilhaListView.<init> regarding code at \nFile \"cmdUi.PilhaListView.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "cmdUi.PilhaListView.<init>(java.util.ArrayList)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method setPilhas. */
  after (final cmdUi.PilhaListView object$rac, final java.util.ArrayList pilhas) throwing (Throwable rac$e) :
     (execution(void cmdUi.PilhaListView.setPilhas(java.util.ArrayList))) && this(object$rac) && args(pilhas) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setPilhas(java.util.ArrayList)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"cmdUi.PilhaListView.java\" by method cmdUi.PilhaListView.setPilhas\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method cmdUi.PilhaListView.setPilhas regarding code at \nFile \"cmdUi.PilhaListView.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setPilhas(java.util.ArrayList)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method drawPilhas. */
  after (final cmdUi.PilhaListView object$rac) throwing (Throwable rac$e) :
     (execution(void cmdUi.PilhaListView.drawPilhas())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".drawPilhas()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"cmdUi.PilhaListView.java\" by method cmdUi.PilhaListView.drawPilhas\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method cmdUi.PilhaListView.drawPilhas regarding code at \nFile \"cmdUi.PilhaListView.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".drawPilhas()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method drawCards. */
  after (final cmdUi.PilhaListView object$rac, final model.Pilha pilha) returning (final java.lang.String rac$result) :
     (execution(java.lang.String cmdUi.PilhaListView.drawCards(model.Pilha))) && this(object$rac) && args(pilha) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method cmdUi.PilhaListView.drawCards regarding code at \nFile \"cmdUi.PilhaListView.java\", line 63 (cmdUi.PilhaListView.java:63)";
         evalErrorMsg = "Invalid expression in \"cmdUi.PilhaListView.java\"\nCaused by: ";
       if ((pilha != null)){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".drawCards(model.Pilha)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method drawCards. */
  after (final cmdUi.PilhaListView object$rac, final model.Pilha pilha) throwing (Throwable rac$e) :
     (execution(java.lang.String cmdUi.PilhaListView.drawCards(model.Pilha))) && this(object$rac) && args(pilha) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".drawCards(model.Pilha)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"cmdUi.PilhaListView.java\" by method cmdUi.PilhaListView.drawCards\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method cmdUi.PilhaListView.drawCards regarding code at \nFile \"cmdUi.PilhaListView.java\", line 63 (cmdUi.PilhaListView.java:63)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".drawCards(model.Pilha)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check non-static invariants of 
   * class PilhaListView. */
  before (final cmdUi.PilhaListView object$rac) :
     (execution(!static * cmdUi.PilhaListView+.*(..))) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
         String invErrorMsg = "@pre <File \"PilhaListView.java\"> regarding code at \nFile \"PilhaListView.java\"\nnon_null for field 'pilhas' <File \"cmdUi.PilhaListView.java\", line 11, character 34 (cmdUi.PilhaListView.java:11)>";
         String evalErrorMsg = "Invalid expression in \"@pre <File \"PilhaListView.java\"> regarding code at \nFile \"PilhaListView.java\"\nnon_null for field 'pilhas' <File \"cmdUi.PilhaListView.java\", line 11, character 34 (cmdUi.PilhaListView.java:11)>\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = (object$rac.pilhas != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
             throw (JMLAssertionError) rac$cause;
            }
            else {
             throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
       JMLChecker.checkInvariant(rac$b, invErrorMsg, -1);

     }

  /** Generated by AspectJML to check the precondition of
   * method PilhaListView. */
  before (final cmdUi.PilhaListView object$rac, final java.util.ArrayList pilhas) :
     execution(cmdUi.PilhaListView.new( java.util.ArrayList )) && 
     this(object$rac) && args(pilhas) {
       String preErrorMsg = "by method cmdUi.PilhaListView.<init> regarding code at \nFile \"cmdUi.PilhaListView.java\""+", when \n"+"\t\'pilhas\' is "+pilhas+ ", when \n"+"\t\'pilhas\' is "+pilhas;
       String evalErrorMsg = "Invalid expression in \"cmdUi.PilhaListView.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (pilhas != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "cmdUi.PilhaListView.<init>(java.util.ArrayList)");

     }

  /** Generated by AspectJML to check the precondition of
   * method setPilhas. */
  before (final cmdUi.PilhaListView object$rac, final java.util.ArrayList pilhas) :
     (execution(void cmdUi.PilhaListView.setPilhas(java.util.ArrayList))) && 
     this(object$rac) && args(pilhas) {
       String preErrorMsg = "by method cmdUi.PilhaListView.setPilhas regarding code at \nFile \"cmdUi.PilhaListView.java\""+", when \n"+"\t\'pilhas\' is "+pilhas+ ", when \n"+"\t\'pilhas\' is "+pilhas;
       String evalErrorMsg = "Invalid expression in \"cmdUi.PilhaListView.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (pilhas != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setPilhas(java.util.ArrayList)");

     }

  /** Generated by AspectJML to check the precondition of
   * method drawCards. */
  before (final cmdUi.PilhaListView object$rac, final model.Pilha pilha) :
     (execution(java.lang.String cmdUi.PilhaListView.drawCards(model.Pilha))) && 
     this(object$rac) && args(pilha) {
       String preErrorMsg = "by method cmdUi.PilhaListView.drawCards regarding code at \nFile \"cmdUi.PilhaListView.java\", line 63 (cmdUi.PilhaListView.java:63)"+", when \n"+"\t\'pilha\' is "+pilha;
       String evalErrorMsg = "Invalid expression in \"cmdUi.PilhaListView.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (pilha != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".drawCards(model.Pilha)");

     }


  /** Generated by AspectJML to check non-static invariants of 
   * class PilhaListView. */
  after (final cmdUi.PilhaListView object$rac) :
     (execution(!static * cmdUi.PilhaListView+.*(..)) || 
       execution(cmdUi.PilhaListView+.new(..))) && 
     !execution(void cmdUi.PilhaListView.finalize() throws Throwable) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
       if (!(JMLChecker.hasAnyJMLError)) {
         String invErrorMsg = "@post <File \"PilhaListView.java\"> regarding code at \nFile \"PilhaListView.java\"\nnon_null for field 'pilhas' <File \"cmdUi.PilhaListView.java\", line 11, character 34 (cmdUi.PilhaListView.java:11)>";
         String evalErrorMsg = "Invalid expression in \"@post <File \"PilhaListView.java\"> regarding code at \nFile \"PilhaListView.java\"\nnon_null for field 'pilhas' <File \"cmdUi.PilhaListView.java\", line 11, character 34 (cmdUi.PilhaListView.java:11)>\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = (object$rac.pilhas != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
         }
         JMLChecker.checkInvariant(rac$b, invErrorMsg, -1);

       }
     }

  /** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
    after(final cmdUi.PilhaListView object$rac): (execution( * cmdUi.PilhaListView..*+.*(..))
            || execution(cmdUi.PilhaListView..*+.new(..))
            || execution( * cmdUi.PilhaListView+.*(..))
            || execution(cmdUi.PilhaListView+.new(..))) && 
     this(object$rac) {
     JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
    }

  /** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
    after() throwing (Throwable rac$e): (execution( * cmdUi.PilhaListView..*+.*(..))
            || execution(cmdUi.PilhaListView..*+.new(..))
            || execution( * cmdUi.PilhaListView+.*(..))
            || execution(cmdUi.PilhaListView+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }

  /** Generated by AspectJML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_PilhaListView{
    before(): (execution( * cmdUi.PilhaListView..*+.*(..))
            || execution(cmdUi.PilhaListView..*+.new(..))
            || execution( * cmdUi.PilhaListView+.*(..))
            || execution(cmdUi.PilhaListView+.new(..))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }
}
