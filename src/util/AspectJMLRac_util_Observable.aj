import util.*;
import org.jmlspecs.ajmlrac.runtime.*;
import org.jmlspecs.lang.annotation.*;
import java.util.Map;


privileged aspect AspectJMLRac_util_Observable16a19648_d07d_4970_9805_b576fc1cabf2 {

 declare precedence: AspectJMLRac_*, *;



  /** Generated by AspectJML to check the exceptional postcondition of
   * method addObserver. */
  after (final util.Observable object$rac, final util.Observer o) throwing (Throwable rac$e) :
     (execution(void util.Observable.addObserver(util.Observer))) && this(object$rac) && args(o) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".addObserver(util.Observer)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"util.Observable.java\" by method util.Observable.addObserver\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method util.Observable.addObserver regarding specifications at \nFile \"util.Observable.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".addObserver(util.Observer)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method removeObserver. */
  after (final util.Observable object$rac, final util.Observer o) throwing (Throwable rac$e) :
     (execution(void util.Observable.removeObserver(util.Observer))) && this(object$rac) && args(o) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".removeObserver(util.Observer)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"util.Observable.java\" by method util.Observable.removeObserver\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method util.Observable.removeObserver regarding specifications at \nFile \"util.Observable.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".removeObserver(util.Observer)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method notifyAllObservers. */
  after (final util.Observable object$rac) throwing (Throwable rac$e) :
     (execution(void util.Observable.notifyAllObservers())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".notifyAllObservers()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"util.Observable.java\" by method util.Observable.notifyAllObservers\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method util.Observable.notifyAllObservers regarding specifications at \nFile \"util.Observable.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".notifyAllObservers()", rac$e);
  		 }
  		   }
  	 }



  /** Generated by AspectJML to check the precondition of
   * method addObserver. */
  before (final util.Observable object$rac, final util.Observer o) :
     (execution(void util.Observable.addObserver(util.Observer))) && 
     this(object$rac) && args(o) {
       String preErrorMsg = "by method util.Observable.addObserver regarding specifications at \nFile \"util.Observable.java\", when \n\t\'o\' is "+o;
       String evalErrorMsg = "Invalid expression in \"util.Observable.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (o != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".addObserver(util.Observer)");

     }

  /** Generated by AspectJML to check the precondition of
   * method removeObserver. */
  before (final util.Observable object$rac, final util.Observer o) :
     (execution(void util.Observable.removeObserver(util.Observer))) && 
     this(object$rac) && args(o) {
       String preErrorMsg = "by method util.Observable.removeObserver regarding specifications at \nFile \"util.Observable.java\", when \n\t\'o\' is "+o;
       String evalErrorMsg = "Invalid expression in \"util.Observable.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (o != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".removeObserver(util.Observer)");

     }



  /** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
    after(final util.Observable object$rac): (execution( * util.Observable..*+.*(..))
            || execution(util.Observable..*+.new(..))
            || execution( * util.Observable+.*(..))
            || execution(util.Observable+.new(..))) && 
     this(object$rac) {
     JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
    }

  /** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
    after() throwing (Throwable rac$e): (execution( * util.Observable..*+.*(..))
            || execution(util.Observable..*+.new(..))
            || execution( * util.Observable+.*(..))
            || execution(util.Observable+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }

  /** Generated by AspectJML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_Observable{
    before(): (execution( * util.Observable..*+.*(..))
            || execution(util.Observable..*+.new(..))
            || execution( * util.Observable+.*(..))
            || execution(util.Observable+.new(..))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }
}
