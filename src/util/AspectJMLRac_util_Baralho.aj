import util.*;
import org.jmlspecs.ajmlrac.runtime.*;
import org.jmlspecs.lang.annotation.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Map;


privileged aspect AspectJMLRac_util_Baralho6f687d30_f9bd_41eb_a76b_bc98001f0430 {

 declare precedence: AspectJMLRac_*, *;



  /** Generated by AspectJML to check the exceptional postcondition of
   * method Baralho. */
  after (final util.Baralho object$rac) throwing (Throwable rac$e) :
     execution(util.Baralho.new(  )) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "util.Baralho.<init>()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"util.Baralho.java\" by method util.Baralho.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method util.Baralho.<init> regarding code at \nFile \"util.Baralho.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "util.Baralho.<init>()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method Baralho. */
  after (final util.Baralho object$rac, final boolean embaralhar) throwing (Throwable rac$e) :
     execution(util.Baralho.new( boolean )) && this(object$rac) && args(embaralhar) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "util.Baralho.<init>(boolean)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"util.Baralho.java\" by method util.Baralho.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method util.Baralho.<init> regarding code at \nFile \"util.Baralho.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "util.Baralho.<init>(boolean)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method puxarCartas. */
  after (final util.Baralho object$rac, final int qtd) returning (final java.util.ArrayList rac$result) :
     (execution(java.util.ArrayList util.Baralho.puxarCartas(int))) && this(object$rac) && args(qtd) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method util.Baralho.puxarCartas regarding code at \nFile \"util.Baralho.java\", line 38 (util.Baralho.java:38)";
         evalErrorMsg = "Invalid expression in \"util.Baralho.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".puxarCartas(int)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method puxarCartas. */
  after (final util.Baralho object$rac, final int qtd) throwing (Throwable rac$e) :
     (execution(java.util.ArrayList util.Baralho.puxarCartas(int))) && this(object$rac) && args(qtd) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".puxarCartas(int)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"util.Baralho.java\" by method util.Baralho.puxarCartas\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method util.Baralho.puxarCartas regarding code at \nFile \"util.Baralho.java\", line 38 (util.Baralho.java:38)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".puxarCartas(int)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method puxarTodasAsCartas. */
  after (final util.Baralho object$rac) returning (final java.util.ArrayList rac$result) :
     (execution(java.util.ArrayList util.Baralho.puxarTodasAsCartas())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method util.Baralho.puxarTodasAsCartas regarding code at \nFile \"util.Baralho.java\", line 48 (util.Baralho.java:48)";
         evalErrorMsg = "Invalid expression in \"util.Baralho.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".puxarTodasAsCartas()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method puxarTodasAsCartas. */
  after (final util.Baralho object$rac) throwing (Throwable rac$e) :
     (execution(java.util.ArrayList util.Baralho.puxarTodasAsCartas())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".puxarTodasAsCartas()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"util.Baralho.java\" by method util.Baralho.puxarTodasAsCartas\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method util.Baralho.puxarTodasAsCartas regarding code at \nFile \"util.Baralho.java\", line 48 (util.Baralho.java:48)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".puxarTodasAsCartas()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method isEmpty. */
  after (final util.Baralho object$rac) throwing (Throwable rac$e) :
     (execution(boolean util.Baralho.isEmpty())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".isEmpty()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"util.Baralho.java\" by method util.Baralho.isEmpty\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method util.Baralho.isEmpty regarding code at \nFile \"util.Baralho.java\", line 52 (util.Baralho.java:52)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".isEmpty()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check non-static invariants of 
   * class Baralho. */
  before (final util.Baralho object$rac) :
     (execution(!static * util.Baralho+.*(..))) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
         String invErrorMsg = "@pre <File \"Baralho.java\"> regarding code at \nFile \"Baralho.java\"\nnon_null for field 'cartas' <File \"util.Baralho.java\", line 9, character 34 (util.Baralho.java:9)>";
         String evalErrorMsg = "Invalid expression in \"@pre <File \"Baralho.java\"> regarding code at \nFile \"Baralho.java\"\nnon_null for field 'cartas' <File \"util.Baralho.java\", line 9, character 34 (util.Baralho.java:9)>\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = (object$rac.cartas != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
             throw (JMLAssertionError) rac$cause;
            }
            else {
             throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
       JMLChecker.checkInvariant(rac$b, invErrorMsg, -1);

     }


  /** Generated by AspectJML to check non-static invariants of 
   * class Baralho. */
  after (final util.Baralho object$rac) :
     (execution(!static * util.Baralho+.*(..)) || 
       execution(util.Baralho+.new(..))) && 
     !execution(void util.Baralho.finalize() throws Throwable) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
       if (!(JMLChecker.hasAnyJMLError)) {
         String invErrorMsg = "@post <File \"Baralho.java\"> regarding code at \nFile \"Baralho.java\"\nnon_null for field 'cartas' <File \"util.Baralho.java\", line 9, character 34 (util.Baralho.java:9)>";
         String evalErrorMsg = "Invalid expression in \"@post <File \"Baralho.java\"> regarding code at \nFile \"Baralho.java\"\nnon_null for field 'cartas' <File \"util.Baralho.java\", line 9, character 34 (util.Baralho.java:9)>\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = (object$rac.cartas != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
         }
         JMLChecker.checkInvariant(rac$b, invErrorMsg, -1);

       }
     }

  /** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
    after(final util.Baralho object$rac): (execution( * util.Baralho..*+.*(..))
            || execution(util.Baralho..*+.new(..))
            || execution( * util.Baralho+.*(..))
            || execution(util.Baralho+.new(..))) && 
     this(object$rac) {
     JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
    }

  /** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
    after() throwing (Throwable rac$e): (execution( * util.Baralho..*+.*(..))
            || execution(util.Baralho..*+.new(..))
            || execution( * util.Baralho+.*(..))
            || execution(util.Baralho+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
}
