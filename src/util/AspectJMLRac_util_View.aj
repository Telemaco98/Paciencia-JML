import util.*;
import org.jmlspecs.ajmlrac.runtime.*;
import org.jmlspecs.lang.annotation.*;
import java.util.Map;


privileged aspect AspectJMLRac_util_View5bab12c8_8fe4_43c8_b982_d80eaa9f6eab {

 declare precedence: AspectJMLRac_*, *;

  /** Generated by AspectJML to check the exceptional postcondition of
   * method drawOnScreen. */
  after (final util.View object$rac) throwing (Throwable rac$e) :
     (execution(void util.View.drawOnScreen())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".drawOnScreen()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"util.View.java\" by method util.View.drawOnScreen\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method util.View.drawOnScreen regarding specifications at \nFile \"util.View.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".drawOnScreen()", rac$e);
  		 }
  		   }
  	 }





  /** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
    after(final util.View object$rac): (execution( * util.View..*+.*(..))
            || execution(util.View..*+.new(..))
            || execution( * util.View+.*(..))
            || execution(util.View+.new(..))) && 
     this(object$rac) {
     JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
    }

  /** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
    after() throwing (Throwable rac$e): (execution( * util.View..*+.*(..))
            || execution(util.View..*+.new(..))
            || execution( * util.View+.*(..))
            || execution(util.View+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
}
