import util.*;
import org.jmlspecs.ajmlrac.runtime.*;
import org.jmlspecs.lang.annotation.*;
import java.awt.Color;
import java.util.Map;


privileged aspect AspectJMLRac_util_Naipe5d83a05d_8f70_4a2b_8da6_d227f89c0818 {

 declare precedence: AspectJMLRac_*, *;


  /** Generated by AspectJML to check the normal postcondition of
   * method getColor. */
  after (final util.Naipe object$rac) returning (final java.lang.Object rac$result) :
     (execution(java.lang.Object util.Naipe.getColor())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method util.Naipe.getColor regarding code at \nFile \"util.Naipe.java\", line 24 (util.Naipe.java:24)";
         evalErrorMsg = "Invalid expression in \"util.Naipe.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getColor()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getColor. */
  after (final util.Naipe object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.Object util.Naipe.getColor())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getColor()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"util.Naipe.java\" by method util.Naipe.getColor\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method util.Naipe.getColor regarding code at \nFile \"util.Naipe.java\", line 24 (util.Naipe.java:24)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getColor()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method values. */
   after () returning (final util.Naipe[] rac$result) :
     execution(static util.Naipe[] util.Naipe.values()) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method util.Naipe.values regarding code at \nFile \"util.Naipe.java\", line 25 (util.Naipe.java:25)";
         evalErrorMsg = "Invalid expression in \"util.Naipe.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, "util.Naipe.values()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method values. */
   after () throwing (Throwable rac$e) :
     execution(static util.Naipe[] util.Naipe.values()) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "util.Naipe.values()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"util.Naipe.java\" by method util.Naipe.values\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method util.Naipe.values regarding code at \nFile \"util.Naipe.java\", line 25 (util.Naipe.java:25)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "util.Naipe.values()", rac$e);
  		 }
  		   }
  	 }





  /** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
    after(final util.Naipe object$rac): (execution( * util.Naipe..*+.*(..))
            || execution(util.Naipe..*+.new(..))
            || execution( * util.Naipe+.*(..))
            || execution(util.Naipe+.new(..))) && 
     this(object$rac) {
     JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
    }

  /** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
    after() throwing (Throwable rac$e): (execution( * util.Naipe..*+.*(..))
            || execution(util.Naipe..*+.new(..))
            || execution( * util.Naipe+.*(..))
            || execution(util.Naipe+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
}
