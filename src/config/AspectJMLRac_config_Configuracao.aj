import config.*;
import org.jmlspecs.ajmlrac.runtime.*;
import org.jmlspecs.lang.annotation.*;
import java.util.Map;


privileged aspect AspectJMLRac_config_Configuracaob6ac73cc_dae5_4002_9977_d4271fc34956 {

 declare precedence: AspectJMLRac_*, *;



  /** Generated by AspectJML to check the exceptional postcondition of
   * method Configuracao. */
  after (final config.Configuracao object$rac) throwing (Throwable rac$e) :
     execution(config.Configuracao.new(  )) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "config.Configuracao.<init>()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"config.Configuracao.java\" by method config.Configuracao.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method config.Configuracao.<init> regarding code at \nFile \"config.Configuracao.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "config.Configuracao.<init>()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method getInstance. */
   after () returning (final config.Configuracao rac$result) :
     execution(static config.Configuracao config.Configuracao.getInstance()) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method config.Configuracao.getInstance regarding code at \nFile \"config.Configuracao.java\", line 22 (config.Configuracao.java:22)";
         evalErrorMsg = "Invalid expression in \"config.Configuracao.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, "config.Configuracao.getInstance()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getInstance. */
   after () throwing (Throwable rac$e) :
     execution(static config.Configuracao config.Configuracao.getInstance()) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "config.Configuracao.getInstance()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"config.Configuracao.java\" by method config.Configuracao.getInstance\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method config.Configuracao.getInstance regarding code at \nFile \"config.Configuracao.java\", line 22 (config.Configuracao.java:22)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "config.Configuracao.getInstance()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method setModoEstoque. */
  after (final config.Configuracao object$rac, final int modo) throwing (Throwable rac$e) :
     (execution(void config.Configuracao.setModoEstoque(int))) && this(object$rac) && args(modo) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setModoEstoque(int)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"config.Configuracao.java\" by method config.Configuracao.setModoEstoque\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method config.Configuracao.setModoEstoque regarding code at \nFile \"config.Configuracao.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setModoEstoque(int)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method getQtdCartasPuxadasEstoque. */
  after (final config.Configuracao object$rac) throwing (Throwable rac$e) :
     (execution(int config.Configuracao.getQtdCartasPuxadasEstoque())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getQtdCartasPuxadasEstoque()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"config.Configuracao.java\" by method config.Configuracao.getQtdCartasPuxadasEstoque\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method config.Configuracao.getQtdCartasPuxadasEstoque regarding code at \nFile \"config.Configuracao.java\", line 34 (config.Configuracao.java:34)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getQtdCartasPuxadasEstoque()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check static invariants of 
   * class Configuracao. */
  before () :
     (execution( * config.Configuracao+.*(..)) || 
       execution(config.Configuracao+.new(..))) && 
     !@annotation(JMLHelper) {
         String invErrorMsg = "@pre <File \"Configuracao.java\"> regarding code at \nFile \"Configuracao.java\"\nnon_null for field 'config' <File \"config.Configuracao.java\", line 13, character 45 (config.Configuracao.java:13)>";
         String evalErrorMsg = "Invalid expression in \"@pre <File \"Configuracao.java\"> regarding code at \nFile \"Configuracao.java\"\nnon_null for field 'config' <File \"config.Configuracao.java\", line 13, character 45 (config.Configuracao.java:13)>\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = (config.Configuracao.config != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
             throw (JMLAssertionError) rac$cause;
            }
            else {
             throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
       JMLChecker.checkInvariant(rac$b, invErrorMsg, -1);

     }


  /** Generated by AspectJML to check static invariants of 
   * class Configuracao. */
  after () :
     (execution( * config.Configuracao+.*(..)) || 
       execution(config.Configuracao+.new(..)) || 
       staticinitialization(config.Configuracao+)) && 
     !@annotation(JMLHelper) {
       if (!(JMLChecker.hasAnyJMLError)) {
         String invErrorMsg = "@post <File \"Configuracao.java\"> regarding code at \nFile \"Configuracao.java\"\nnon_null for field 'config' <File \"config.Configuracao.java\", line 13, character 45 (config.Configuracao.java:13)>";
         String evalErrorMsg = "Invalid expression in \"@post <File \"Configuracao.java\"> regarding code at \nFile \"Configuracao.java\"\nnon_null for field 'config' <File \"config.Configuracao.java\", line 13, character 45 (config.Configuracao.java:13)>\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = (config.Configuracao.config != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
         }
         JMLChecker.checkInvariant(rac$b, invErrorMsg, -1);

       }
     }



  /** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
    after(final config.Configuracao object$rac): (execution( * config.Configuracao..*+.*(..))
            || execution(config.Configuracao..*+.new(..))
            || execution( * config.Configuracao+.*(..))
            || execution(config.Configuracao+.new(..))) && 
     this(object$rac) {
     JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
    }

  /** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
    after() throwing (Throwable rac$e): (execution( * config.Configuracao..*+.*(..))
            || execution(config.Configuracao..*+.new(..))
            || execution( * config.Configuracao+.*(..))
            || execution(config.Configuracao+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
}
