import model.*;
import org.jmlspecs.ajmlrac.runtime.*;
import org.jmlspecs.lang.annotation.*;
import java.util.ArrayList;
import util.Carta;
import java.util.Map;


privileged aspect AspectJMLRac_model_Estoque44483d50_2ea7_4cde_a4fb_a30cc109f72e {

 declare precedence: AspectJMLRac_*, *;

  /** Generated by AspectJML to check the exceptional postcondition of
   * method Estoque. */
  after (final model.Estoque object$rac) throwing (Throwable rac$e) :
     execution(model.Estoque.new(  )) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "model.Estoque.<init>()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Estoque.java\" by method model.Estoque.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Estoque.<init> regarding code at \nFile \"model.Estoque.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "model.Estoque.<init>()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method Estoque. */
  after (final model.Estoque object$rac, final java.util.ArrayList cartasParaBaixo) throwing (Throwable rac$e) :
     execution(model.Estoque.new( java.util.ArrayList )) && this(object$rac) && args(cartasParaBaixo) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "model.Estoque.<init>(java.util.ArrayList)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Estoque.java\" by method model.Estoque.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Estoque.<init> regarding code at \nFile \"model.Estoque.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "model.Estoque.<init>(java.util.ArrayList)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method verificarCarta. */
  after (final model.Estoque object$rac, final util.Carta carta) throwing (Throwable rac$e) :
     (execution(boolean model.Estoque.verificarCarta(util.Carta))) && this(object$rac) && args(carta) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".verificarCarta(util.Carta)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Estoque.java\" by method model.Estoque.verificarCarta\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Estoque.verificarCarta regarding code at \nFile \"model.Estoque.java\", line 21 (model.Estoque.java:21)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".verificarCarta(util.Carta)", rac$e);
  		 }
  		   }
  	 }



  /** Generated by AspectJML to check the precondition of
   * method Estoque. */
  before (final model.Estoque object$rac, final java.util.ArrayList cartasParaBaixo) :
     execution(model.Estoque.new( java.util.ArrayList )) && 
     this(object$rac) && args(cartasParaBaixo) {
       String preErrorMsg = "by method model.Estoque.<init> regarding code at \nFile \"model.Estoque.java\""+", when \n"+"\t\'cartasParaBaixo\' is "+cartasParaBaixo+ ", when \n"+"\t\'cartasParaBaixo\' is "+cartasParaBaixo;
       String evalErrorMsg = "Invalid expression in \"model.Estoque.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (cartasParaBaixo != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "model.Estoque.<init>(java.util.ArrayList)");

     }

  /** Generated by AspectJML to check the precondition of
   * method verificarCarta. */
  before (final model.Estoque object$rac, final util.Carta carta) :
     (execution(boolean model.Estoque.verificarCarta(util.Carta))) && 
     this(object$rac) && args(carta) {
       String preErrorMsg = "by method model.Estoque.verificarCarta regarding code at \nFile \"model.Estoque.java\", line 21 (model.Estoque.java:21)"+", when \n"+"\t\'carta\' is "+carta;
       String evalErrorMsg = "Invalid expression in \"model.Estoque.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (carta != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".verificarCarta(util.Carta)");

     }



  /** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
    after(final model.Estoque object$rac): (execution( * model.Estoque..*+.*(..))
            || execution(model.Estoque..*+.new(..))
            || execution( * model.Estoque+.*(..))
            || execution(model.Estoque+.new(..))) && 
     this(object$rac) {
     JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
    }

  /** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
    after() throwing (Throwable rac$e): (execution( * model.Estoque..*+.*(..))
            || execution(model.Estoque..*+.new(..))
            || execution( * model.Estoque+.*(..))
            || execution(model.Estoque+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }

  /** Generated by AspectJML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_Estoque{
    before(): (execution( * model.Estoque..*+.*(..))
            || execution(model.Estoque..*+.new(..))
            || execution( * model.Estoque+.*(..))
            || execution(model.Estoque+.new(..))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }
}
