import model.*;
import org.jmlspecs.ajmlrac.runtime.*;
import org.jmlspecs.lang.annotation.*;
import java.util.ArrayList;
import config.Configuracao;
import util.Baralho;
import util.Carta;
import util.Observable;
import util.Observer;
import java.util.Map;


privileged aspect AspectJMLRac_model_Mesa4dfa8a9c_7caa_4167_aa1b_48037d35993e {

 declare precedence: AspectJMLRac_*, *;
   
   















  /** Generated by AspectJML to check the exceptional postcondition of
   * method Mesa. */
  after (final model.Mesa object$rac, final util.Baralho baralho) throwing (Throwable rac$e) :
     execution(model.Mesa.new( util.Baralho )) && this(object$rac) && args(baralho) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "model.Mesa.<init>(util.Baralho)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Mesa.java\" by method model.Mesa.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Mesa.<init> regarding code at \nFile \"model.Mesa.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "model.Mesa.<init>(util.Baralho)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method puxarCartasEstoque. */
  after (final model.Mesa object$rac) throwing (Throwable rac$e) :
     (execution(void model.Mesa.puxarCartasEstoque())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".puxarCartasEstoque()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Mesa.java\" by method model.Mesa.puxarCartasEstoque\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Mesa.puxarCartasEstoque regarding code at \nFile \"model.Mesa.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".puxarCartasEstoque()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method virarCartaFileira. */
  after (final model.Mesa object$rac, final int index) throwing (Throwable rac$e) :
     (execution(void model.Mesa.virarCartaFileira(int))) && this(object$rac) && args(index) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".virarCartaFileira(int)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Mesa.java\" by method model.Mesa.virarCartaFileira\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Mesa.virarCartaFileira regarding code at \nFile \"model.Mesa.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".virarCartaFileira(int)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method moverCartaTopo. */
  after (final model.Mesa object$rac, final int fonte_ind, final int destino_ind) throwing (Throwable rac$e) :
     (execution(boolean model.Mesa.moverCartaTopo(int, int))) && this(object$rac) && args(fonte_ind, destino_ind) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".moverCartaTopo(int, int)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Mesa.java\" by method model.Mesa.moverCartaTopo\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Mesa.moverCartaTopo regarding code at \nFile \"model.Mesa.java\", line 122 (model.Mesa.java:122)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".moverCartaTopo(int, int)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method moverCartas. */
  after (final model.Mesa object$rac, final int fonte_ind, final int destino_ind, final int valorCartaReferencia) throwing (Throwable rac$e) :
     (execution(boolean model.Mesa.moverCartas(int, int, int))) && this(object$rac) && args(fonte_ind, destino_ind, valorCartaReferencia) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".moverCartas(int, int, int)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Mesa.java\" by method model.Mesa.moverCartas\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Mesa.moverCartas regarding code at \nFile \"model.Mesa.java\", line 147 (model.Mesa.java:147)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".moverCartas(int, int, int)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method getGameStatus. */
  after (final model.Mesa object$rac) returning (final model.Mesa.GameStatus rac$result) :
     (execution(model.Mesa.GameStatus model.Mesa.getGameStatus())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method model.Mesa.getGameStatus regarding code at \nFile \"model.Mesa.java\", line 151 (model.Mesa.java:151)";
         evalErrorMsg = "Invalid expression in \"model.Mesa.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getGameStatus()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getGameStatus. */
  after (final model.Mesa object$rac) throwing (Throwable rac$e) :
     (execution(model.Mesa.GameStatus model.Mesa.getGameStatus())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getGameStatus()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Mesa.java\" by method model.Mesa.getGameStatus\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Mesa.getGameStatus regarding code at \nFile \"model.Mesa.java\", line 151 (model.Mesa.java:151)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getGameStatus()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method getEstoque. */
  after (final model.Mesa object$rac) returning (final model.Pilha rac$result) :
     (execution(model.Pilha model.Mesa.getEstoque())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method model.Mesa.getEstoque regarding code at \nFile \"model.Mesa.java\", line 155 (model.Mesa.java:155)";
         evalErrorMsg = "Invalid expression in \"model.Mesa.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getEstoque()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getEstoque. */
  after (final model.Mesa object$rac) throwing (Throwable rac$e) :
     (execution(model.Pilha model.Mesa.getEstoque())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getEstoque()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Mesa.java\" by method model.Mesa.getEstoque\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Mesa.getEstoque regarding code at \nFile \"model.Mesa.java\", line 155 (model.Mesa.java:155)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getEstoque()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method getDescarte. */
  after (final model.Mesa object$rac) returning (final model.Pilha rac$result) :
     (execution(model.Pilha model.Mesa.getDescarte())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method model.Mesa.getDescarte regarding code at \nFile \"model.Mesa.java\", line 159 (model.Mesa.java:159)";
         evalErrorMsg = "Invalid expression in \"model.Mesa.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getDescarte()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getDescarte. */
  after (final model.Mesa object$rac) throwing (Throwable rac$e) :
     (execution(model.Pilha model.Mesa.getDescarte())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getDescarte()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Mesa.java\" by method model.Mesa.getDescarte\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Mesa.getDescarte regarding code at \nFile \"model.Mesa.java\", line 159 (model.Mesa.java:159)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getDescarte()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method getFundacao. */
  after (final model.Mesa object$rac, final int index) returning (final model.Pilha rac$result) :
     (execution(model.Pilha model.Mesa.getFundacao(int))) && this(object$rac) && args(index) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method model.Mesa.getFundacao regarding code at \nFile \"model.Mesa.java\", line 163 (model.Mesa.java:163)";
         evalErrorMsg = "Invalid expression in \"model.Mesa.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getFundacao(int)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getFundacao. */
  after (final model.Mesa object$rac, final int index) throwing (Throwable rac$e) :
     (execution(model.Pilha model.Mesa.getFundacao(int))) && this(object$rac) && args(index) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getFundacao(int)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Mesa.java\" by method model.Mesa.getFundacao\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Mesa.getFundacao regarding code at \nFile \"model.Mesa.java\", line 163 (model.Mesa.java:163)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getFundacao(int)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method getFileira. */
  after (final model.Mesa object$rac, final int index) returning (final model.Pilha rac$result) :
     (execution(model.Pilha model.Mesa.getFileira(int))) && this(object$rac) && args(index) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method model.Mesa.getFileira regarding code at \nFile \"model.Mesa.java\", line 167 (model.Mesa.java:167)";
         evalErrorMsg = "Invalid expression in \"model.Mesa.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getFileira(int)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getFileira. */
  after (final model.Mesa object$rac, final int index) throwing (Throwable rac$e) :
     (execution(model.Pilha model.Mesa.getFileira(int))) && this(object$rac) && args(index) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getFileira(int)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Mesa.java\" by method model.Mesa.getFileira\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Mesa.getFileira regarding code at \nFile \"model.Mesa.java\", line 167 (model.Mesa.java:167)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getFileira(int)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method getPilha. */
  after (final model.Mesa object$rac, final int index) returning (final model.Pilha rac$result) :
     (execution(model.Pilha model.Mesa.getPilha(int))) && this(object$rac) && args(index) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method model.Mesa.getPilha regarding code at \nFile \"model.Mesa.java\", line 171 (model.Mesa.java:171)";
         evalErrorMsg = "Invalid expression in \"model.Mesa.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getPilha(int)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getPilha. */
  after (final model.Mesa object$rac, final int index) throwing (Throwable rac$e) :
     (execution(model.Pilha model.Mesa.getPilha(int))) && this(object$rac) && args(index) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getPilha(int)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Mesa.java\" by method model.Mesa.getPilha\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Mesa.getPilha regarding code at \nFile \"model.Mesa.java\", line 171 (model.Mesa.java:171)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getPilha(int)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method getPilhas. */
  after (final model.Mesa object$rac) returning (final java.util.ArrayList rac$result) :
     (execution(java.util.ArrayList model.Mesa.getPilhas())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method model.Mesa.getPilhas regarding code at \nFile \"model.Mesa.java\", line 175 (model.Mesa.java:175)";
         evalErrorMsg = "Invalid expression in \"model.Mesa.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getPilhas()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getPilhas. */
  after (final model.Mesa object$rac) throwing (Throwable rac$e) :
     (execution(java.util.ArrayList model.Mesa.getPilhas())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getPilhas()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Mesa.java\" by method model.Mesa.getPilhas\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Mesa.getPilhas regarding code at \nFile \"model.Mesa.java\", line 175 (model.Mesa.java:175)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getPilhas()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method toString. */
  after (final model.Mesa object$rac) returning (final java.lang.String rac$result) :
     (execution(java.lang.String model.Mesa.toString())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method model.Mesa.toString regarding code at \nFile \"model.Mesa.java\", line 190 (model.Mesa.java:190)";
         evalErrorMsg = "Invalid expression in \"model.Mesa.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".toString()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method toString. */
  after (final model.Mesa object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String model.Mesa.toString())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".toString()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Mesa.java\" by method model.Mesa.toString\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Mesa.toString regarding code at \nFile \"model.Mesa.java\", line 190 (model.Mesa.java:190)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".toString()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method addObserver. */
  after (final model.Mesa object$rac, final util.Observer o) throwing (Throwable rac$e) :
     (execution(void model.Mesa.addObserver(util.Observer))) && this(object$rac) && args(o) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".addObserver(util.Observer)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Mesa.java\" by method model.Mesa.addObserver\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Mesa.addObserver regarding code at \nFile \"model.Mesa.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".addObserver(util.Observer)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method removeObserver. */
  after (final model.Mesa object$rac, final util.Observer o) throwing (Throwable rac$e) :
     (execution(void model.Mesa.removeObserver(util.Observer))) && this(object$rac) && args(o) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".removeObserver(util.Observer)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Mesa.java\" by method model.Mesa.removeObserver\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Mesa.removeObserver regarding code at \nFile \"model.Mesa.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".removeObserver(util.Observer)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method notifyAllObservers. */
  after (final model.Mesa object$rac) throwing (Throwable rac$e) :
     (execution(void model.Mesa.notifyAllObservers())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".notifyAllObservers()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Mesa.java\" by method model.Mesa.notifyAllObservers\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Mesa.notifyAllObservers regarding code at \nFile \"model.Mesa.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".notifyAllObservers()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method values. */
   after () returning (final model.Mesa.GameStatus[] rac$result) :
     execution(static model.Mesa.GameStatus[] model.Mesa$GameStatus.values()) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method model.Mesa$GameStatus.values regarding code at \nFile \"model.Mesa.java\", line 25 (model.Mesa.java:25)";
         evalErrorMsg = "Invalid expression in \"model.Mesa.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, "model.Mesa$GameStatus.values()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method values. */
   after () throwing (Throwable rac$e) :
     execution(static model.Mesa.GameStatus[] model.Mesa$GameStatus.values()) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "model.Mesa$GameStatus.values()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Mesa.java\" by method model.Mesa$GameStatus.values\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Mesa$GameStatus.values regarding code at \nFile \"model.Mesa.java\", line 25 (model.Mesa.java:25)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "model.Mesa$GameStatus.values()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method verificarSituacao. */
  after (final model.Mesa.Verificador object$rac) returning (final model.Mesa.GameStatus rac$result) :
     (execution(model.Mesa.GameStatus model.Mesa$Verificador.verificarSituacao())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method model.Mesa$Verificador.verificarSituacao regarding code at \nFile \"model.Mesa.java\", line 217 (model.Mesa.java:217)";
         evalErrorMsg = "Invalid expression in \"model.Mesa.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".verificarSituacao()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method verificarSituacao. */
  after (final model.Mesa.Verificador object$rac) throwing (Throwable rac$e) :
     (execution(model.Mesa.GameStatus model.Mesa$Verificador.verificarSituacao())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".verificarSituacao()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Mesa.java\" by method model.Mesa$Verificador.verificarSituacao\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Mesa$Verificador.verificarSituacao regarding code at \nFile \"model.Mesa.java\", line 217 (model.Mesa.java:217)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".verificarSituacao()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method verificarJogoVencido. */
  after (final model.Mesa.Verificador object$rac) throwing (Throwable rac$e) :
     (execution(boolean model.Mesa$Verificador.verificarJogoVencido())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".verificarJogoVencido()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Mesa.java\" by method model.Mesa$Verificador.verificarJogoVencido\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Mesa$Verificador.verificarJogoVencido regarding code at \nFile \"model.Mesa.java\", line 229 (model.Mesa.java:229)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".verificarJogoVencido()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check non-static invariants of 
   * class Mesa. */
  before (final model.Mesa object$rac) :
     (execution(!static * model.Mesa+.*(..))) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
         String invErrorMsg = "@pre <File \"Mesa.java\"> regarding code at \nFile \"Mesa.java\"\nnon_null for field 'pilhas' <File \"model.Mesa.java\", line 17, character 34 (model.Mesa.java:17)>\nnon_null for field 'verificador' <File \"model.Mesa.java\", line 27, character 42 (model.Mesa.java:27)>\nnon_null for field 'observers' <File \"model.Mesa.java\", line 30, character 38 (model.Mesa.java:30)>";
         String evalErrorMsg = "Invalid expression in \"@pre <File \"Mesa.java\"> regarding code at \nFile \"Mesa.java\"\nnon_null for field 'pilhas' <File \"model.Mesa.java\", line 17, character 34 (model.Mesa.java:17)>\nnon_null for field 'verificador' <File \"model.Mesa.java\", line 27, character 42 (model.Mesa.java:27)>\nnon_null for field 'observers' <File \"model.Mesa.java\", line 30, character 38 (model.Mesa.java:30)>\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = ((object$rac.observers != null) && ((object$rac.verificador != null) && (object$rac.pilhas != null)));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
             throw (JMLAssertionError) rac$cause;
            }
            else {
             throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
       JMLChecker.checkInvariant(rac$b, invErrorMsg, -1);

     }



  /** Generated by AspectJML to check the precondition of
   * method Mesa. */
  before (final model.Mesa object$rac, final util.Baralho baralho) :
     execution(model.Mesa.new( util.Baralho )) && 
     this(object$rac) && args(baralho) {
       String preErrorMsg = "by method model.Mesa.<init> regarding code at \nFile \"model.Mesa.java\""+", when \n"+"\t\'baralho\' is "+baralho+ ", when \n"+"\t\'baralho\' is "+baralho;
       String evalErrorMsg = "Invalid expression in \"model.Mesa.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (baralho != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "model.Mesa.<init>(util.Baralho)");

     }

  /** Generated by AspectJML to check the precondition of
   * method addObserver. */
  before (final model.Mesa object$rac, final util.Observer o) :
     (execution(void model.Mesa.addObserver(util.Observer))) && 
     this(object$rac) && args(o) {
       String preErrorMsg = "by method model.Mesa.addObserver regarding code at \nFile \"model.Mesa.java\""+", when \n"+"\t\'o\' is "+o+ ", when \n"+"\t\'o\' is "+o;
       String evalErrorMsg = "Invalid expression in \"model.Mesa.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (o != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".addObserver(util.Observer)");

     }

  /** Generated by AspectJML to check the precondition of
   * method removeObserver. */
  before (final model.Mesa object$rac, final util.Observer o) :
     (execution(void model.Mesa.removeObserver(util.Observer))) && 
     this(object$rac) && args(o) {
       String preErrorMsg = "by method model.Mesa.removeObserver regarding code at \nFile \"model.Mesa.java\""+", when \n"+"\t\'o\' is "+o+ ", when \n"+"\t\'o\' is "+o;
       String evalErrorMsg = "Invalid expression in \"model.Mesa.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (o != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".removeObserver(util.Observer)");

     }




  /** Generated by AspectJML to check non-static invariants of 
   * class Mesa. */
  after (final model.Mesa object$rac) :
     (execution(!static * model.Mesa+.*(..)) || 
       execution(model.Mesa+.new(..))) && 
     !execution(void model.Mesa.finalize() throws Throwable) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
       if (!(JMLChecker.hasAnyJMLError)) {
         String invErrorMsg = "@post <File \"Mesa.java\"> regarding code at \nFile \"Mesa.java\"\nnon_null for field 'pilhas' <File \"model.Mesa.java\", line 17, character 34 (model.Mesa.java:17)>\nnon_null for field 'verificador' <File \"model.Mesa.java\", line 27, character 42 (model.Mesa.java:27)>\nnon_null for field 'observers' <File \"model.Mesa.java\", line 30, character 38 (model.Mesa.java:30)>";
         String evalErrorMsg = "Invalid expression in \"@post <File \"Mesa.java\"> regarding code at \nFile \"Mesa.java\"\nnon_null for field 'pilhas' <File \"model.Mesa.java\", line 17, character 34 (model.Mesa.java:17)>\nnon_null for field 'verificador' <File \"model.Mesa.java\", line 27, character 42 (model.Mesa.java:27)>\nnon_null for field 'observers' <File \"model.Mesa.java\", line 30, character 38 (model.Mesa.java:30)>\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = ((object$rac.observers != null) && ((object$rac.verificador != null) && (object$rac.pilhas != null)));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
         }
         JMLChecker.checkInvariant(rac$b, invErrorMsg, -1);

       }
     }



  /** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
    after(final model.Mesa object$rac): (execution( * model.Mesa..*+.*(..))
            || execution(model.Mesa..*+.new(..))
            || execution( * model.Mesa+.*(..))
            || execution(model.Mesa+.new(..))) && 
     this(object$rac) {
     JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
    }

  /** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
    after() throwing (Throwable rac$e): (execution( * model.Mesa..*+.*(..))
            || execution(model.Mesa..*+.new(..))
            || execution( * model.Mesa+.*(..))
            || execution(model.Mesa+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }

  /** Generated by AspectJML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_Mesa{
    before(): (execution( * model.Mesa..*+.*(..))
            || execution(model.Mesa..*+.new(..))
            || execution( * model.Mesa+.*(..))
            || execution(model.Mesa+.new(..))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }
}
