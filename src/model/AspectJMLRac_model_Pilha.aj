import model.*;
import org.jmlspecs.ajmlrac.runtime.*;
import org.jmlspecs.lang.annotation.*;
import java.util.ArrayList;
import java.util.Stack;
import util.Carta;
import java.util.Map;


privileged aspect AspectJMLRac_model_Pilha4ea12c10_13ac_4d03_a70a_01937f96ed0b {

 declare precedence: AspectJMLRac_*, *;












  /** Generated by AspectJML to check the exceptional postcondition of
   * method Pilha. */
  after (final model.Pilha object$rac) throwing (Throwable rac$e) :
     execution(model.Pilha.new(  )) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "model.Pilha.<init>()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Pilha.java\" by method model.Pilha.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Pilha.<init> regarding code at \nFile \"model.Pilha.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "model.Pilha.<init>()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method verificarCarta. */
  after (final model.Pilha object$rac, final util.Carta carta) throwing (Throwable rac$e) :
     (execution(boolean model.Pilha.verificarCarta(util.Carta))) && this(object$rac) && args(carta) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".verificarCarta(util.Carta)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Pilha.java\" by method model.Pilha.verificarCarta\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Pilha.verificarCarta regarding specifications at \nFile \"model.Pilha.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".verificarCarta(util.Carta)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method inserirCarta. */
  after (final model.Pilha object$rac, final util.Carta carta) throwing (Throwable rac$e) :
     (execution(void model.Pilha.inserirCarta(util.Carta))) && this(object$rac) && args(carta) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".inserirCarta(util.Carta)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Pilha.java\" by method model.Pilha.inserirCarta\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Pilha.inserirCarta regarding code at \nFile \"model.Pilha.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".inserirCarta(util.Carta)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method inserirCartas. */
  after (final model.Pilha object$rac, final java.util.ArrayList cartas) throwing (Throwable rac$e) :
     (execution(void model.Pilha.inserirCartas(java.util.ArrayList))) && this(object$rac) && args(cartas) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".inserirCartas(java.util.ArrayList)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Pilha.java\" by method model.Pilha.inserirCartas\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Pilha.inserirCartas regarding code at \nFile \"model.Pilha.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".inserirCartas(java.util.ArrayList)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method receberCarta. */
  after (final model.Pilha object$rac, final util.Carta carta) throwing (Throwable rac$e) :
     (execution(boolean model.Pilha.receberCarta(util.Carta))) && this(object$rac) && args(carta) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".receberCarta(util.Carta)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Pilha.java\" by method model.Pilha.receberCarta\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Pilha.receberCarta regarding code at \nFile \"model.Pilha.java\", line 43 (model.Pilha.java:43)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".receberCarta(util.Carta)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method receberCartas. */
  after (final model.Pilha object$rac, final java.util.ArrayList cartas) throwing (Throwable rac$e) :
     (execution(boolean model.Pilha.receberCartas(java.util.ArrayList))) && this(object$rac) && args(cartas) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".receberCartas(java.util.ArrayList)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Pilha.java\" by method model.Pilha.receberCartas\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Pilha.receberCartas regarding code at \nFile \"model.Pilha.java\", line 62 (model.Pilha.java:62)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".receberCartas(java.util.ArrayList)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method cartaTopo. */
  after (final model.Pilha object$rac) returning (final util.Carta rac$result) :
     (execution(util.Carta model.Pilha.cartaTopo())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method model.Pilha.cartaTopo regarding code at \nFile \"model.Pilha.java\", line 70 (model.Pilha.java:70)";
         evalErrorMsg = "Invalid expression in \"model.Pilha.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".cartaTopo()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method cartaTopo. */
  after (final model.Pilha object$rac) throwing (Throwable rac$e) :
     (execution(util.Carta model.Pilha.cartaTopo())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".cartaTopo()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Pilha.java\" by method model.Pilha.cartaTopo\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Pilha.cartaTopo regarding code at \nFile \"model.Pilha.java\", line 70 (model.Pilha.java:70)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".cartaTopo()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method puxarCartaTopo. */
  after (final model.Pilha object$rac) returning (final util.Carta rac$result) :
     (execution(util.Carta model.Pilha.puxarCartaTopo())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method model.Pilha.puxarCartaTopo regarding code at \nFile \"model.Pilha.java\", line 78 (model.Pilha.java:78)";
         evalErrorMsg = "Invalid expression in \"model.Pilha.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".puxarCartaTopo()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method puxarCartaTopo. */
  after (final model.Pilha object$rac) throwing (Throwable rac$e) :
     (execution(util.Carta model.Pilha.puxarCartaTopo())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".puxarCartaTopo()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Pilha.java\" by method model.Pilha.puxarCartaTopo\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Pilha.puxarCartaTopo regarding code at \nFile \"model.Pilha.java\", line 78 (model.Pilha.java:78)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".puxarCartaTopo()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method getCartaParaCimaByValor. */
  after (final model.Pilha object$rac, final int valor) returning (final util.Carta rac$result) :
     (execution(util.Carta model.Pilha.getCartaParaCimaByValor(int))) && this(object$rac) && args(valor) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method model.Pilha.getCartaParaCimaByValor regarding code at \nFile \"model.Pilha.java\", line 85 (model.Pilha.java:85)";
         evalErrorMsg = "Invalid expression in \"model.Pilha.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getCartaParaCimaByValor(int)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getCartaParaCimaByValor. */
  after (final model.Pilha object$rac, final int valor) throwing (Throwable rac$e) :
     (execution(util.Carta model.Pilha.getCartaParaCimaByValor(int))) && this(object$rac) && args(valor) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getCartaParaCimaByValor(int)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Pilha.java\" by method model.Pilha.getCartaParaCimaByValor\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Pilha.getCartaParaCimaByValor regarding code at \nFile \"model.Pilha.java\", line 85 (model.Pilha.java:85)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getCartaParaCimaByValor(int)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method puxarAPartirDeCarta. */
  after (final model.Pilha object$rac, final int valor) returning (final java.util.ArrayList rac$result) :
     (execution(java.util.ArrayList model.Pilha.puxarAPartirDeCarta(int))) && this(object$rac) && args(valor) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method model.Pilha.puxarAPartirDeCarta regarding code at \nFile \"model.Pilha.java\", line 104 (model.Pilha.java:104)";
         evalErrorMsg = "Invalid expression in \"model.Pilha.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".puxarAPartirDeCarta(int)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method puxarAPartirDeCarta. */
  after (final model.Pilha object$rac, final int valor) throwing (Throwable rac$e) :
     (execution(java.util.ArrayList model.Pilha.puxarAPartirDeCarta(int))) && this(object$rac) && args(valor) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".puxarAPartirDeCarta(int)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Pilha.java\" by method model.Pilha.puxarAPartirDeCarta\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Pilha.puxarAPartirDeCarta regarding code at \nFile \"model.Pilha.java\", line 104 (model.Pilha.java:104)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".puxarAPartirDeCarta(int)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method isEmpty. */
  after (final model.Pilha object$rac) throwing (Throwable rac$e) :
     (execution(boolean model.Pilha.isEmpty())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".isEmpty()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Pilha.java\" by method model.Pilha.isEmpty\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Pilha.isEmpty regarding code at \nFile \"model.Pilha.java\", line 110 (model.Pilha.java:110)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".isEmpty()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method getCartas. */
  after (final model.Pilha object$rac) returning (final util.Carta[] rac$result) :
     (execution(util.Carta[] model.Pilha.getCartas())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method model.Pilha.getCartas regarding code at \nFile \"model.Pilha.java\", line 119 (model.Pilha.java:119)";
         evalErrorMsg = "Invalid expression in \"model.Pilha.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getCartas()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getCartas. */
  after (final model.Pilha object$rac) throwing (Throwable rac$e) :
     (execution(util.Carta[] model.Pilha.getCartas())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getCartas()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Pilha.java\" by method model.Pilha.getCartas\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Pilha.getCartas regarding code at \nFile \"model.Pilha.java\", line 119 (model.Pilha.java:119)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getCartas()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method toString. */
  after (final model.Pilha object$rac) returning (final java.lang.String rac$result) :
     (execution(java.lang.String model.Pilha.toString())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method model.Pilha.toString regarding code at \nFile \"model.Pilha.java\", line 134 (model.Pilha.java:134)";
         evalErrorMsg = "Invalid expression in \"model.Pilha.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".toString()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method toString. */
  after (final model.Pilha object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String model.Pilha.toString())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".toString()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"model.Pilha.java\" by method model.Pilha.toString\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method model.Pilha.toString regarding code at \nFile \"model.Pilha.java\", line 134 (model.Pilha.java:134)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".toString()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check non-static invariants of 
   * class Pilha. */
  before (final model.Pilha object$rac) :
     (execution(!static * model.Pilha+.*(..))) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
         String invErrorMsg = "@pre <File \"Pilha.java\"> regarding code at \nFile \"Pilha.java\"\nnon_null for field 'cartas' <File \"model.Pilha.java\", line 13, character 32 (model.Pilha.java:13)>";
         String evalErrorMsg = "Invalid expression in \"@pre <File \"Pilha.java\"> regarding code at \nFile \"Pilha.java\"\nnon_null for field 'cartas' <File \"model.Pilha.java\", line 13, character 32 (model.Pilha.java:13)>\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = (object$rac.cartas != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
             throw (JMLAssertionError) rac$cause;
            }
            else {
             throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
       JMLChecker.checkInvariant(rac$b, invErrorMsg, -1);

     }

  /** Generated by AspectJML to check the precondition of
   * method verificarCarta. */
  before (final model.Pilha object$rac, final util.Carta carta) :
     (execution(boolean model.Pilha.verificarCarta(util.Carta))) && 
     this(object$rac) && args(carta) {
       String preErrorMsg = "by method model.Pilha.verificarCarta regarding specifications at \nFile \"model.Pilha.java\", when \n\t\'carta\' is "+carta;
       String evalErrorMsg = "Invalid expression in \"model.Pilha.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (carta != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".verificarCarta(util.Carta)");

     }

  /** Generated by AspectJML to check the precondition of
   * method inserirCarta. */
  before (final model.Pilha object$rac, final util.Carta carta) :
     (execution(void model.Pilha.inserirCarta(util.Carta))) && 
     this(object$rac) && args(carta) {
       String preErrorMsg = "by method model.Pilha.inserirCarta regarding code at \nFile \"model.Pilha.java\""+", when \n"+"\t\'carta\' is "+carta+ ", when \n"+"\t\'carta\' is "+carta;
       String evalErrorMsg = "Invalid expression in \"model.Pilha.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (carta != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".inserirCarta(util.Carta)");

     }

  /** Generated by AspectJML to check the precondition of
   * method inserirCartas. */
  before (final model.Pilha object$rac, final java.util.ArrayList cartas) :
     (execution(void model.Pilha.inserirCartas(java.util.ArrayList))) && 
     this(object$rac) && args(cartas) {
       String preErrorMsg = "by method model.Pilha.inserirCartas regarding code at \nFile \"model.Pilha.java\""+", when \n"+"\t\'cartas\' is "+cartas+ ", when \n"+"\t\'cartas\' is "+cartas;
       String evalErrorMsg = "Invalid expression in \"model.Pilha.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (cartas != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".inserirCartas(java.util.ArrayList)");

     }

  /** Generated by AspectJML to check the precondition of
   * method receberCarta. */
  before (final model.Pilha object$rac, final util.Carta carta) :
     (execution(boolean model.Pilha.receberCarta(util.Carta))) && 
     this(object$rac) && args(carta) {
       String preErrorMsg = "by method model.Pilha.receberCarta regarding code at \nFile \"model.Pilha.java\", line 43 (model.Pilha.java:43)"+", when \n"+"\t\'carta\' is "+carta;
       String evalErrorMsg = "Invalid expression in \"model.Pilha.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (carta != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".receberCarta(util.Carta)");

     }

  /** Generated by AspectJML to check the precondition of
   * method receberCartas. */
  before (final model.Pilha object$rac, final java.util.ArrayList cartas) :
     (execution(boolean model.Pilha.receberCartas(java.util.ArrayList))) && 
     this(object$rac) && args(cartas) {
       String preErrorMsg = "by method model.Pilha.receberCartas regarding code at \nFile \"model.Pilha.java\", line 62 (model.Pilha.java:62)"+", when \n"+"\t\'cartas\' is "+cartas;
       String evalErrorMsg = "Invalid expression in \"model.Pilha.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (cartas != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".receberCartas(java.util.ArrayList)");

     }


  /** Generated by AspectJML to check non-static invariants of 
   * class Pilha. */
  after (final model.Pilha object$rac) :
     (execution(!static * model.Pilha+.*(..)) || 
       (execution(model.Pilha+.new(..)) && !within(model.Pilha))) && 
     !execution(void model.Pilha.finalize() throws Throwable) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
       if (!(JMLChecker.hasAnyJMLError)) {
         String invErrorMsg = "@post <File \"Pilha.java\"> regarding code at \nFile \"Pilha.java\"\nnon_null for field 'cartas' <File \"model.Pilha.java\", line 13, character 32 (model.Pilha.java:13)>";
         String evalErrorMsg = "Invalid expression in \"@post <File \"Pilha.java\"> regarding code at \nFile \"Pilha.java\"\nnon_null for field 'cartas' <File \"model.Pilha.java\", line 13, character 32 (model.Pilha.java:13)>\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = (object$rac.cartas != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
         }
         JMLChecker.checkInvariant(rac$b, invErrorMsg, -1);

       }
     }

  /** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
    after(final model.Pilha object$rac): (execution( * model.Pilha..*+.*(..))
            || execution(model.Pilha..*+.new(..))
            || execution( * model.Pilha+.*(..))
            || execution(model.Pilha+.new(..))) && 
     this(object$rac) {
     JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
    }

  /** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
    after() throwing (Throwable rac$e): (execution( * model.Pilha..*+.*(..))
            || execution(model.Pilha..*+.new(..))
            || execution( * model.Pilha+.*(..))
            || execution(model.Pilha+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }

  /** Generated by AspectJML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_Pilha{
    before(): (execution( * model.Pilha..*+.*(..))
            || execution(model.Pilha..*+.new(..))
            || execution( * model.Pilha+.*(..))
            || execution(model.Pilha+.new(..))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }
}
