import controller.*;
import org.jmlspecs.ajmlrac.runtime.*;
import org.jmlspecs.lang.annotation.*;
import java.time.Duration;
import java.time.Instant;
import java.util.ArrayList;
import config.Configuracao;
import model.Mesa;
import model.Pilha;
import util.Baralho;
import util.Observer;
import util.View;
import java.util.Map;


privileged aspect AspectJMLRac_controller_Controllered0ebf33_a31d_4c58_8667_86cb9aa93dc7 {

 declare precedence: AspectJMLRac_*, *;












  /** Generated by AspectJML to check the exceptional postcondition of
   * method Controller. */
  after (final controller.Controller object$rac, final util.View view) throwing (Throwable rac$e) :
     execution(controller.Controller.new( util.View )) && this(object$rac) && args(view) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "controller.Controller.<init>(util.View)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"controller.Controller.java\" by method controller.Controller.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method controller.Controller.<init> regarding code at \nFile \"controller.Controller.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "controller.Controller.<init>(util.View)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method iniciarJogo. */
  after (final controller.Controller object$rac) throwing (Throwable rac$e) :
     (execution(void controller.Controller.iniciarJogo())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".iniciarJogo()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"controller.Controller.java\" by method controller.Controller.iniciarJogo\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method controller.Controller.iniciarJogo regarding code at \nFile \"controller.Controller.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".iniciarJogo()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method moverCartas. */
  after (final controller.Controller object$rac, final int origem, final int destino, final int valorReferencia) throwing (Throwable rac$e) :
     (execution(boolean controller.Controller.moverCartas(int, int, int))) && this(object$rac) && args(origem, destino, valorReferencia) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".moverCartas(int, int, int)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"controller.Controller.java\" by method controller.Controller.moverCartas\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method controller.Controller.moverCartas regarding code at \nFile \"controller.Controller.java\", line 37 (controller.Controller.java:37)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".moverCartas(int, int, int)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method moverCartaTopo. */
  after (final controller.Controller object$rac, final int origem, final int destino) throwing (Throwable rac$e) :
     (execution(boolean controller.Controller.moverCartaTopo(int, int))) && this(object$rac) && args(origem, destino) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".moverCartaTopo(int, int)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"controller.Controller.java\" by method controller.Controller.moverCartaTopo\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method controller.Controller.moverCartaTopo regarding code at \nFile \"controller.Controller.java\", line 42 (controller.Controller.java:42)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".moverCartaTopo(int, int)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method isVencedor. */
  after (final controller.Controller object$rac) throwing (Throwable rac$e) :
     (execution(boolean controller.Controller.isVencedor())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".isVencedor()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"controller.Controller.java\" by method controller.Controller.isVencedor\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method controller.Controller.isVencedor regarding code at \nFile \"controller.Controller.java\", line 51 (controller.Controller.java:51)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".isVencedor()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method virarCartaFileira. */
  after (final controller.Controller object$rac, final int index) throwing (Throwable rac$e) :
     (execution(void controller.Controller.virarCartaFileira(int))) && this(object$rac) && args(index) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".virarCartaFileira(int)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"controller.Controller.java\" by method controller.Controller.virarCartaFileira\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method controller.Controller.virarCartaFileira regarding code at \nFile \"controller.Controller.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".virarCartaFileira(int)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method puxarCartaEstoque. */
  after (final controller.Controller object$rac) throwing (Throwable rac$e) :
     (execution(void controller.Controller.puxarCartaEstoque())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".puxarCartaEstoque()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"controller.Controller.java\" by method controller.Controller.puxarCartaEstoque\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method controller.Controller.puxarCartaEstoque regarding code at \nFile \"controller.Controller.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".puxarCartaEstoque()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method setPuxarTresCartasEstoque. */
  after (final controller.Controller object$rac) throwing (Throwable rac$e) :
     (execution(void controller.Controller.setPuxarTresCartasEstoque())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setPuxarTresCartasEstoque()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"controller.Controller.java\" by method controller.Controller.setPuxarTresCartasEstoque\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method controller.Controller.setPuxarTresCartasEstoque regarding code at \nFile \"controller.Controller.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setPuxarTresCartasEstoque()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method setPuxarUmaCartaEstoque. */
  after (final controller.Controller object$rac) throwing (Throwable rac$e) :
     (execution(void controller.Controller.setPuxarUmaCartaEstoque())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setPuxarUmaCartaEstoque()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"controller.Controller.java\" by method controller.Controller.setPuxarUmaCartaEstoque\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method controller.Controller.setPuxarUmaCartaEstoque regarding code at \nFile \"controller.Controller.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setPuxarUmaCartaEstoque()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method finalizar. */
  after (final controller.Controller object$rac) throwing (Throwable rac$e) :
     (execution(void controller.Controller.finalizar())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".finalizar()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"controller.Controller.java\" by method controller.Controller.finalizar\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method controller.Controller.finalizar regarding code at \nFile \"controller.Controller.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".finalizar()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method getPilhas. */
  after (final controller.Controller object$rac) returning (final java.util.ArrayList rac$result) :
     (execution(java.util.ArrayList controller.Controller.getPilhas())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method controller.Controller.getPilhas regarding code at \nFile \"controller.Controller.java\", line 82 (controller.Controller.java:82)";
         evalErrorMsg = "Invalid expression in \"controller.Controller.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getPilhas()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getPilhas. */
  after (final controller.Controller object$rac) throwing (Throwable rac$e) :
     (execution(java.util.ArrayList controller.Controller.getPilhas())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getPilhas()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"controller.Controller.java\" by method controller.Controller.getPilhas\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method controller.Controller.getPilhas regarding code at \nFile \"controller.Controller.java\", line 82 (controller.Controller.java:82)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getPilhas()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method gameDuration. */
  after (final controller.Controller object$rac) returning (final java.time.Duration rac$result) :
     (execution(java.time.Duration controller.Controller.gameDuration())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method controller.Controller.gameDuration regarding code at \nFile \"controller.Controller.java\", line 89 (controller.Controller.java:89)";
         evalErrorMsg = "Invalid expression in \"controller.Controller.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".gameDuration()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method gameDuration. */
  after (final controller.Controller object$rac) throwing (Throwable rac$e) :
     (execution(java.time.Duration controller.Controller.gameDuration())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".gameDuration()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"controller.Controller.java\" by method controller.Controller.gameDuration\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method controller.Controller.gameDuration regarding code at \nFile \"controller.Controller.java\", line 89 (controller.Controller.java:89)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".gameDuration()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method update. */
  after (final controller.Controller object$rac) throwing (Throwable rac$e) :
     (execution(void controller.Controller.update())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".update()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"controller.Controller.java\" by method controller.Controller.update\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method controller.Controller.update regarding code at \nFile \"controller.Controller.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".update()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check non-static invariants of 
   * class Controller. */
  before (final controller.Controller object$rac) :
     (execution(!static * controller.Controller+.*(..))) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
         String invErrorMsg = "@pre <File \"Controller.java\"> regarding code at \nFile \"Controller.java\"\nnon_null for field 'mesa' <File \"controller.Controller.java\", line 18, character 27 (controller.Controller.java:18)>\nnon_null for field 'view' <File \"controller.Controller.java\", line 19, character 27 (controller.Controller.java:19)>\nnon_null for field 'start' <File \"controller.Controller.java\", line 20, character 31 (controller.Controller.java:20)>\nnon_null for field 'end' <File \"controller.Controller.java\", line 21, character 29 (controller.Controller.java:21)>";
         String evalErrorMsg = "Invalid expression in \"@pre <File \"Controller.java\"> regarding code at \nFile \"Controller.java\"\nnon_null for field 'mesa' <File \"controller.Controller.java\", line 18, character 27 (controller.Controller.java:18)>\nnon_null for field 'view' <File \"controller.Controller.java\", line 19, character 27 (controller.Controller.java:19)>\nnon_null for field 'start' <File \"controller.Controller.java\", line 20, character 31 (controller.Controller.java:20)>\nnon_null for field 'end' <File \"controller.Controller.java\", line 21, character 29 (controller.Controller.java:21)>\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = ((object$rac.end != null) && ((object$rac.start != null) && ((object$rac.view != null) && (object$rac.mesa != null))));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
             throw (JMLAssertionError) rac$cause;
            }
            else {
             throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
       JMLChecker.checkInvariant(rac$b, invErrorMsg, -1);

     }

  /** Generated by AspectJML to check the precondition of
   * method Controller. */
  before (final controller.Controller object$rac, final util.View view) :
     execution(controller.Controller.new( util.View )) && 
     this(object$rac) && args(view) {
       String preErrorMsg = "by method controller.Controller.<init> regarding code at \nFile \"controller.Controller.java\""+", when \n"+"\t\'view\' is "+view+ ", when \n"+"\t\'view\' is "+view;
       String evalErrorMsg = "Invalid expression in \"controller.Controller.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (view != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "controller.Controller.<init>(util.View)");

     }


  /** Generated by AspectJML to check non-static invariants of 
   * class Controller. */
  after (final controller.Controller object$rac) :
     (execution(!static * controller.Controller+.*(..)) || 
       execution(controller.Controller+.new(..))) && 
     !execution(void controller.Controller.finalize() throws Throwable) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
       if (!(JMLChecker.hasAnyJMLError)) {
         String invErrorMsg = "@post <File \"Controller.java\"> regarding code at \nFile \"Controller.java\"\nnon_null for field 'mesa' <File \"controller.Controller.java\", line 18, character 27 (controller.Controller.java:18)>\nnon_null for field 'view' <File \"controller.Controller.java\", line 19, character 27 (controller.Controller.java:19)>\nnon_null for field 'start' <File \"controller.Controller.java\", line 20, character 31 (controller.Controller.java:20)>\nnon_null for field 'end' <File \"controller.Controller.java\", line 21, character 29 (controller.Controller.java:21)>";
         String evalErrorMsg = "Invalid expression in \"@post <File \"Controller.java\"> regarding code at \nFile \"Controller.java\"\nnon_null for field 'mesa' <File \"controller.Controller.java\", line 18, character 27 (controller.Controller.java:18)>\nnon_null for field 'view' <File \"controller.Controller.java\", line 19, character 27 (controller.Controller.java:19)>\nnon_null for field 'start' <File \"controller.Controller.java\", line 20, character 31 (controller.Controller.java:20)>\nnon_null for field 'end' <File \"controller.Controller.java\", line 21, character 29 (controller.Controller.java:21)>\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = ((object$rac.end != null) && ((object$rac.start != null) && ((object$rac.view != null) && (object$rac.mesa != null))));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
         }
         JMLChecker.checkInvariant(rac$b, invErrorMsg, -1);

       }
     }

  /** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
    after(final controller.Controller object$rac): (execution( * controller.Controller..*+.*(..))
            || execution(controller.Controller..*+.new(..))
            || execution( * controller.Controller+.*(..))
            || execution(controller.Controller+.new(..))) && 
     this(object$rac) {
     JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
    }

  /** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
    after() throwing (Throwable rac$e): (execution( * controller.Controller..*+.*(..))
            || execution(controller.Controller..*+.new(..))
            || execution( * controller.Controller+.*(..))
            || execution(controller.Controller+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
}
